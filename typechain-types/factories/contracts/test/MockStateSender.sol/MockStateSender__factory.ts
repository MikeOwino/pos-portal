/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockStateSender,
  MockStateSenderInterface,
} from "../../../../contracts/test/MockStateSender.sol/MockStateSender";

const _abi = [
  {
    inputs: [],
    name: "stateId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "syncState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101b7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306d62e1f1461003b57806316f1983114610055575b600080fd5b6100436100d7565b60408051918252519081900360200190f35b6100d56004803603604081101561006b57600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561009657600080fd5b8201836020820111156100a857600080fd5b803590602001918460018302840111640100000000831117156100ca57600080fd5b5090925090506100dd565b005b60005481565b6000805460018101909155604080516313629df560e11b81526004810183815260248201928352604482018590526001600160a01b038716936326c53bea939092879287929091606401848480828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561016457600080fd5b505af1158015610178573d6000803e3d6000fd5b5050505050505056fea264697066735822122054b03a270e9fade52b1446508c32cc9125d9173167ada7e9a8fa1efbd5e57feb64736f6c63430006060033";

type MockStateSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockStateSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockStateSender__factory extends ContractFactory {
  constructor(...args: MockStateSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockStateSender> {
    return super.deploy(overrides || {}) as Promise<MockStateSender>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockStateSender {
    return super.attach(address) as MockStateSender;
  }
  override connect(signer: Signer): MockStateSender__factory {
    return super.connect(signer) as MockStateSender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockStateSenderInterface {
    return new utils.Interface(_abi) as MockStateSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockStateSender {
    return new Contract(address, _abi, signerOrProvider) as MockStateSender;
  }
}
