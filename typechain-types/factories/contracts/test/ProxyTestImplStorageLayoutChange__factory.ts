/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ProxyTestImplStorageLayoutChange,
  ProxyTestImplStorageLayoutChangeInterface,
} from "../../../contracts/test/ProxyTestImplStorageLayoutChange";

const _abi = [
  {
    inputs: [],
    name: "a",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "b",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805460ff19169055348015601957600080fd5b506097806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80630dbe671f1460375780634df7e3d014604f575b600080fd5b603d6055565b60408051918252519081900360200190f35b603d605b565b60025481565b6001548156fea26469706673582212204f95ba5a32f16b4c1472c5399639348e07ab61e09405c58c6626278e6c597d0b64736f6c63430006060033";

type ProxyTestImplStorageLayoutChangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProxyTestImplStorageLayoutChangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProxyTestImplStorageLayoutChange__factory extends ContractFactory {
  constructor(...args: ProxyTestImplStorageLayoutChangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ProxyTestImplStorageLayoutChange> {
    return super.deploy(
      overrides || {}
    ) as Promise<ProxyTestImplStorageLayoutChange>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ProxyTestImplStorageLayoutChange {
    return super.attach(address) as ProxyTestImplStorageLayoutChange;
  }
  override connect(signer: Signer): ProxyTestImplStorageLayoutChange__factory {
    return super.connect(signer) as ProxyTestImplStorageLayoutChange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProxyTestImplStorageLayoutChangeInterface {
    return new utils.Interface(
      _abi
    ) as ProxyTestImplStorageLayoutChangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProxyTestImplStorageLayoutChange {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProxyTestImplStorageLayoutChange;
  }
}
