{"abi":[{"type":"function","name":"exitTokens","inputs":[{"name":"rootToken","type":"address","internalType":"address"},{"name":"logRLPList","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"lockTokens","inputs":[{"name":"depositor","type":"address","internalType":"address"},{"name":"depositReceiver","type":"address","internalType":"address"},{"name":"rootToken","type":"address","internalType":"address"},{"name":"depositData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"exitTokens(address,bytes)":"f741a417","lockTokens(address,address,address,bytes)":"e375b64e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"logRLPList\",\"type\":\"bytes\"}],\"name\":\"exitTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rootToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"depositData\",\"type\":\"bytes\"}],\"name\":\"lockTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"exitTokens(address,bytes)\":{\"details\":\"Validates exit log emitted on sidechain. Reverts if validation fails.Processes withdraw based on custom logic. Example: transfer ERC20/ERC721, mint ERC721 if mintable withdraw\",\"params\":{\"logRLPList\":\"Valid sidechain log for data like amount, token id etc.\",\"rootToken\":\"Token which gets withdrawn\"}},\"lockTokens(address,address,address,bytes)\":{\"details\":\"When `depositor` deposits tokens into pos portal, tokens get locked into predicate contract.\",\"params\":{\"depositData\":\"Extra data for deposit (amount for ERC20, token id for ERC721 etc.) [ABI encoded]\",\"depositReceiver\":\"Address (address) who wants to receive tokens on side chain\",\"depositor\":\"Address who wants to deposit tokens\",\"rootToken\":\"Token which gets deposited\"}}},\"title\":\"Token predicate interface for all pos portal predicates\"},\"userdoc\":{\"methods\":{\"exitTokens(address,bytes)\":{\"notice\":\"Validates and processes exit while withdraw process\"},\"lockTokens(address,address,address,bytes)\":{\"notice\":\"Deposit tokens into pos portal\"}},\"notice\":\"Abstract interface that defines methods for custom predicates\"}},\"settings\":{\"compilationTarget\":{\"contracts/root/TokenPredicates/ITokenPredicate.sol\":\"ITokenPredicate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@ensdomains/=node_modules/@ensdomains/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\",\":truffle/=node_modules/truffle/\"]},\"sources\":{\"contracts/lib/RLPReader.sol\":{\"keccak256\":\"0x01fc619322e46138c9a2f0adf392b27a3b9ae2ed3da75e3b8dd2ae12d8d9bdfa\",\"urls\":[\"bzz-raw://15ce28c5d3590e8f2577fce122baf854fd8fe1ea6b9b890e1452d7b92c9ae337\",\"dweb:/ipfs/QmbWLiomK49HrWRB4rgJTi2fdSvvoq1DrRPK2gn8jDyEaW\"]},\"contracts/root/TokenPredicates/ITokenPredicate.sol\":{\"keccak256\":\"0xef7e7901e9050ae618981c16a87bf8faad6f0e46bd0f0d49da2de91834b3930d\",\"urls\":[\"bzz-raw://9628e16738aedbcad4eaa1dbc2ca1505ba7fe403af0878d33436fc44d6a8f7a9\",\"dweb:/ipfs/QmYdgmRwST2F2wATfvf6eweG2ijno8eK9Xo73KRuFYY5YB\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.6.6+commit.6c089d02"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"rootToken","type":"address"},{"internalType":"bytes","name":"logRLPList","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"exitTokens"},{"inputs":[{"internalType":"address","name":"depositor","type":"address"},{"internalType":"address","name":"depositReceiver","type":"address"},{"internalType":"address","name":"rootToken","type":"address"},{"internalType":"bytes","name":"depositData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"lockTokens"}],"devdoc":{"methods":{"exitTokens(address,bytes)":{"details":"Validates exit log emitted on sidechain. Reverts if validation fails.Processes withdraw based on custom logic. Example: transfer ERC20/ERC721, mint ERC721 if mintable withdraw","params":{"logRLPList":"Valid sidechain log for data like amount, token id etc.","rootToken":"Token which gets withdrawn"}},"lockTokens(address,address,address,bytes)":{"details":"When `depositor` deposits tokens into pos portal, tokens get locked into predicate contract.","params":{"depositData":"Extra data for deposit (amount for ERC20, token id for ERC721 etc.) [ABI encoded]","depositReceiver":"Address (address) who wants to receive tokens on side chain","depositor":"Address who wants to deposit tokens","rootToken":"Token which gets deposited"}}}},"userdoc":{"methods":{"exitTokens(address,bytes)":{"notice":"Validates and processes exit while withdraw process"},"lockTokens(address,address,address,bytes)":{"notice":"Deposit tokens into pos portal"}}}},"settings":{"remappings":["@ensdomains/=node_modules/@ensdomains/","@openzeppelin/=node_modules/@openzeppelin/","ds-test/=lib/forge-std/lib/ds-test/src/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat/=node_modules/hardhat/","truffle/=node_modules/truffle/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/root/TokenPredicates/ITokenPredicate.sol":"ITokenPredicate"},"evmVersion":"istanbul","libraries":{}},"sources":{"contracts/lib/RLPReader.sol":{"keccak256":"0x01fc619322e46138c9a2f0adf392b27a3b9ae2ed3da75e3b8dd2ae12d8d9bdfa","urls":["bzz-raw://15ce28c5d3590e8f2577fce122baf854fd8fe1ea6b9b890e1452d7b92c9ae337","dweb:/ipfs/QmbWLiomK49HrWRB4rgJTi2fdSvvoq1DrRPK2gn8jDyEaW"],"license":null},"contracts/root/TokenPredicates/ITokenPredicate.sol":{"keccak256":"0xef7e7901e9050ae618981c16a87bf8faad6f0e46bd0f0d49da2de91834b3930d","urls":["bzz-raw://9628e16738aedbcad4eaa1dbc2ca1505ba7fe403af0878d33436fc44d6a8f7a9","dweb:/ipfs/QmYdgmRwST2F2wATfvf6eweG2ijno8eK9Xo73KRuFYY5YB"],"license":null}},"version":1},"id":57}