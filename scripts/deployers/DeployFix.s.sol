// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import {Script, stdJson, console} from "forge-std/Script.sol";

// These imports get generated by npm run generate:interfaces
import {UpgradableProxy} from "../helpers/interfaces/UpgradableProxy.generated.sol";


contract DeployFix is Script {
    using stdJson for string;

    // owned by 0xfa7d2a996ac6350f4b56c043112da0366a59b74c
    address governance = 0x6e7a5820baD6cebA8Ef5ea69c0C92EbbDAc9CE48;

    address gSafeAddress = 0xFa7D2a996aC6350f4b56C043112Da0366a59b74c;

    // //pos

    // owned by 0xfa7d2a996ac6350f4b56c043112da0366a59b74c
    address rootChainManagerProxy = 0xA0c68C638235ee32657e8f720a23ceC1bFc77C77;
    address rootChainManager;
    // // pending check

    function run() public {
        //uint256 deployerPrivateKey = vm.promptSecretUint("Enter deployer private key: ");
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");

        vm.startBroadcast(deployerPrivateKey);

        // deploy new RootChainManager version
        rootChainManager = deployCode("out/RootChainManager.sol/RootChainManager.json");

        console.log("deployed RootChainManager implementation at: ", rootChainManager);

        vm.stopBroadcast();
   
        console.log("----------------------");
        console.log("Generating payloads \n");

        // Update Proxies
        bytes memory payload = abi.encodeCall(UpgradableProxy.updateImplementation, (rootChainManager));
        console.log("Send: ");
        console.logBytes(payload);
        console.log("to: ", rootChainManagerProxy);
    }
}
